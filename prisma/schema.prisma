generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id         String   @id @default(cuid())
  userId     String?
  street     String
  city       String
  state      String
  postalCode String
  country    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  companyId  String?
  company    Company? @relation(fields: [companyId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean   @default(false)
  phone         String?   @unique
  phoneVerified Boolean   @default(false)
  role          String?
  otpCode       String?
  gender        String?
  otpExpiresAt  DateTime?
  image         String?
  password      String?
  firebaseUid   String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  emailVerificationToken EmailVerificationToken[]
  Company                Company[]
  Address                Address[]
  applications           Application[]
}

model Company {
  id          String       @id @default(cuid())
  name        String
  ownerId     String
  websiteUrl  String?
  owner       User         @relation(fields: [ownerId], references: [id])
  logoUrl     String?
  location    String?
  established DateTime?
  phone       String?
  type        String?
  email       String?
  industry    String?
  size        String?
  bannerUrl   String?
  description String?
  verified    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Address     Address[]
  jobs        Job[]
  SocialLinks SocialLink[]
}

model Job {
  id              String        @id @default(cuid())
  title           String
  description     String?
  postedBy        String
  companyId       String
  company         Company       @relation(fields: [companyId], references: [id])
  location        String?
  minSalary       Float?
  maxSalary       Float?
  employmentType  String?
  role            String?
  experienceLevel String?
  remote          Boolean?      @default(false)
  skills          String?
  requirements    String?
  benefits        String?
  isActive        Boolean       @default(true)
  applications    Application[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Application {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  jobId String
  job   Job    @relation(fields: [jobId], references: [id])

  companyId   String?
  status      String   @default("applied")
  resumeUrl   String?
  coverLetter String?
  appliedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, jobId])
}

model SocialLink {
  id        String  @id @default(cuid())
  label     String
  url       String
  companyId String
  Company   Company @relation(fields: [companyId], references: [id])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}
